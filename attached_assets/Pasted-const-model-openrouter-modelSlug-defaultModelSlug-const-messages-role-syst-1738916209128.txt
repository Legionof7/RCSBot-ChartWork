const model = openrouter(modelSlug || defaultModelSlug)
  const messages = [
    {
      role: 'system',
      content: systemMessage
    },
    ...aiState.get().messages.map((message: any) => ({
      role: message.role,
      content: message.content,
      name: message.name
    }))
  ] satisfies CoreMessage[]

  let result

  try {
    result = await streamUI({
      model,
      initial: <SpinnerMessage />,
      messages,
      maxTokens: 3000,
      text: ({ content, done, delta }) => {
        if (!textStream) {
          textStream = createStreamableValue('')
          textNode = <BotMessage content={textStream.value} />
        }

        if (done) {
          textStream.done()
          aiState.done({
            ...aiState.get(),
            messages: [
              ...aiState.get().messages,
              {
                id: nanoid(),
                role: 'assistant',
                content
              }
            ]
          })
        } else {
          textStream.update(delta)
        }

        return textNode
      },
      tools: {
        listStocks: {
          description: 'List three imaginary stocks that are trending.',
          parameters: listStocksParameters,
          generate: async function* ({ stocks }) {
            yield (
              <BotCard>
                <StocksSkeleton />
              </BotCard>
            )

            await sleep(1000)

            const toolCallId = getToolCallId(modelSlug)

            aiState.done({
              ...aiState.get(),
              messages: [
                ...aiState.get().messages,
                {
                  id: nanoid(),
                  role: 'assistant',
                  content: [
                    {
                      type: 'tool-call',
                      toolName: 'listStocks',
                      toolCallId,
                      args: { stocks }
                    }
                  ]
                },
                {
                  id: nanoid(),
                  role: 'tool',
                  content: [
                    {
                      type: 'tool-result',
                      toolName: 'listStocks',
                      toolCallId,
                      result: stocks
                    }
                  ]
                },
                ...(shouldAddDummyAssistantMessage(modelSlug)
                  ? [dummyAssistantMessage]
                  : [])
              ]
            })

            return (
              <BotCard>
                <Stocks stocks={stocks} />
              </BotCard>
            )
          }
        },
        showStockPrice: {
          description:
            'Get the current stock price of a given stock or currency. Use this to show the price to the user.',
          parameters: showStockPriceParameters,
          generate: async function* ({ symbol, price, delta }) {
            yield (
              <BotCard>
                <StockSkeleton />
              </BotCard>
            )

            await sleep(1000)

            const toolCallId = getToolCallId(modelSlug)

            aiState.done({
              ...aiState.get(),
              messages: [
                ...aiState.get().messages,
                {
                  id: nanoid(),
                  role: 'assistant',
                  content: [
                    {
                      type: 'tool-call',
                      toolName: 'showStockPrice',
                      toolCallId,
                      args: { symbol, price, delta }
                    }
                  ]
                },
                {
                  id: nanoid(),
                  role: 'tool',
                  content: [
                    {
                      type: 'tool-result',
                      toolName: 'showStockPrice',
                      toolCallId,
                      result: { symbol, price, delta }
                    }
                  ]
                },
                ...(shouldAddDummyAssistantMessage(modelSlug)
                  ? [dummyAssistantMessage]
                  : [])
              ]
            })

            return (
              <BotCard>
                <Stock stock={{ symbol, price, delta }} />
              </BotCard>
            )
          }
        },
        showStockPurchase: {
          description:
            'Show price and the UI to purchase a stock or currency. Use this if the user wants to purchase a stock or currency.',
          parameters: showStockPurchaseParameters,
          generate: async function* ({ symbol, price, numberOfShares = 100 }) {
            const toolCallId = getToolCallId(modelSlug)

            if (numberOfShares <= 0 || numberOfShares > 1000) {
              aiState.done({
                ...aiState.get(),
                messages: [
                  ...aiState.get().messages,
                  {
                    id: nanoid(),
                    role: 'assistant',
                    content: [
                      {
                        type: 'tool-call',
                        toolName: 'showStockPurchase',
                        toolCallId,
                        args: { symbol, price, numberOfShares }
                      }
                    ]
                  },